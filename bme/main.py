import machine, bme280, ssd1306, time, math, network, socket
def get_values(bme):    t, p, h = bme.read_compensated_data()    t = t / 100    p = p / 34130    rh = h // 1024 + (h % 1024) / 100    ah = 6.112 * math.exp( 17.67*t / (t + 243.5)  ) * rh * 2.1674 / (273.15 + t)    return (t, p, rh, ah)
i2c_bme = machine.I2C(scl=machine.Pin(12), sda=machine.Pin(14))i2c_ssd = machine.I2C(scl=machine.Pin(5), sda=machine.Pin(4))
oled = ssd1306.SSD1306_I2C(128, 32, i2c_ssd)bme = bme280.BME280(i2c=i2c_bme)ap_if = network.WLAN(network.AP_IF)ap_if.config(essid='meteo', password='meteo', authmode=0)ap_if.active(True)addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1]s = socket.socket()s.bind(addr)s.listen(1)html = """<!DOCTYPE html><html>    <head>        <meta http-equiv="refresh" content="1" charset="utf-8">        <title>meteo</title>    </head>    <body>        <table border="1"> <tr><th>TM</th><th>PR</th><th>RH</th><th>AH</th></tr> %s </table>    </body></html>"""
while True:    oled.fill(0)    vals = get_values(bme)    oled.text( "TM: {} C".format( vals[0] ), 0, 0 )    oled.text( "PR: {} mm".format( vals[1] ), 0, 8 )    oled.text( "RH: {} %".format( vals[2] ), 0, 16)    oled.text( "AH: {} g/m3".format( vals[3]), 0, 24)    oled.show()    print("TM: {} C".format( vals[0] ))    print("PR: {} mm".format( vals[1] ))    print("RH: {} %".format( vals[2] ))    print("AH: {} g/m3".format( vals[3] ))    print("--------------------------")    cl, addr = s.accept()    cl_file = cl.makefile('rwb', 0)    while True:        line = cl_file.readline()        if not line or line == b'\r\n':            break                row = '''<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>''' % ("{} C".format( vals[0] ), "{} mm".format( vals[1] ), "{} %".format( vals[2] ), "{} g/m3".format( vals[3]))    response = html  % ('\n{}'.format(row))    cl.send(response)    cl.close()


